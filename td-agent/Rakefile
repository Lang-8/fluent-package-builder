#!/usr/bin/env rake

require_relative '../lib/td-agent-package-task'
require_relative '../lib/gems_parser'
require_relative 'config.rb'
require 'rake/testtask'
require 'rake/clean'
require 'erb'
require 'shellwords'
require 'pathname'

CLEAN.include(STAGING_DIR)
CLEAN.include(DOWNLOADS_DIR)

# Debian
CLEAN.include("apt/tmp")
CLEAN.include("apt/build.sh")
CLEAN.include("apt/env.sh")
CLEAN.include("debian/tmp")
CLOBBER.include("apt/repositories")

# Red Hat
CLEAN.include("yum/tmp")
CLEAN.include("yum/build.sh")
CLEAN.include("yum/env.sh")
CLOBBER.include("yum/repositories")

# Windows
CLEAN.include("msi/parameters.wxi")
CLEAN.include("msi/project-files.wxs")
CLEAN.include("msi/*.wixobj")
CLEAN.include("msi/*.wixpdb")
CLOBBER.include("msi/*.msi")

class DownloadTask
  include Rake::DSL

  def define
    namespace :download do
      desc "Download core_gems"
      task :core_gems do
        download_gems("core_gems.rb")
      end

      desc "Download plugin_gems"
      task :plugin_gems do
        download_gems("plugin_gems.rb")
      end

      desc "Clone fluentd repository"
      task :fluentd do
        revision = nil
        mkdir_p FLUENTD_SOURCE_DIR
        cd FLUENTD_SOURCE_DIR do
          sh("git", "clone", "https://github.com/fluent/fluentd.git") unless File.exists?("fluentd")
        end
      end
    end
  end

  private

  def download_gems(gems_path)
    gems_parser = GemsParser.parse(File.read(gems_path))
    digits = (gems_parser.target_files.length - 1).to_s.length

    target_dir = File.join(DOWNLOADS_DIR, gems_parser.target_dir)
    remove_dir(target_dir, true)
    mkdir_p(target_dir)
    cd(target_dir) do
      gems_parser.target_files.each_with_index do |target, index|
        name, version = target
        if version.include?("-")
          version_option = ["--version", "#{version.sub(/\-.*/, '')}"]
        else
          version_option = ["--version", "#{version}", "--platform", "ruby"]
        end
        gem = "#{name}-#{version}.gem"
        numbered_gem = sprintf("%0#{digits}d-%s", index, gem)
        sh("gem", "fetch", "#{name}", *version_option)
        `gem install --explain #{gem} --no-document`
        fail "Failed to download #{gem}!" unless $?.success?
        mv("#{gem}", "#{numbered_gem}")
        sleep 1
      end
    end
  end
end

class BuildTask
  include Rake::DSL

  GEM_INSTALL_DIR = File.join("#{STAGING_DIR}", "opt", "#{PACKAGE_NAME}")

  def define
    namespace :build do
      desc "Install core_gems"
      task :core_gems => :"download:core_gems" do
        Dir.glob(File.expand_path(File.join(DOWNLOADS_DIR, 'core_gems', '*.gem'))).sort.each { |gem_path|
          sh("gem", "install", "--no-document", "#{gem_path}", "--install-dir", "#{GEM_INSTALL_DIR}")
        }
      end

      desc "Install fluentd"
      task :fluentd => [:"download:fluentd", :core_gems] do
        revision = nil
        cd FLUENTD_SOURCE_DIR do
          cd "fluentd" do
            sh("git", "checkout", "#{revision}") if revision
            sh("rake", "build")
            sh("gem", "install", "--no-document", "pkg/fluentd-*.gem", "--install-dir", "#{GEM_INSTALL_DIR}")
          end
        end
      end

      desc "Install plugin_gems"
      task :plugin_gems => [:"download:plugin_gems", :fluentd] do
        Dir.glob(File.expand_path(File.join(__dir__, 'plugin_gems', '*.gem'))).sort.each { |gem_path|
          sh("gem", "install", "--no-document", "#{gem_path}", "--install-dir", "#{GEM_INSTALL_DIR}")
        }
      end

      desc "Install all gems"
      task :gems => [:plugin_gems]

      debian_pkg_scripts = ["preinst", "postinst", "prerm", "postrm"]
      debian_pkg_scripts.each do |script|
        CLEAN.include(File.join("debian", script))
      end

      desc "Create debian package script files from template"
      task :deb_scripts do
        # copy pre/post scripts into "debian" directory
        debian_pkg_scripts.each do |script|
          src = template_path('package-scripts', 'td-agent', "deb", script)
          next unless File.exist?(src)
          dest = File.join("debian", File.basename(script))
          generate_from_template(dest, src, template_config, { mode: 0755 })
        end
      end

      desc "Create td-agent configuration files from template"
      task :td_agent_config do
        conf_paths = [
          ['td-agent', 'td-agent.conf'],
          ['td-agent', 'td-agent.conf.tmpl'],
          ['logrotate.d', 'td-agent.logrotate']
        ]
        conf_paths.each { |item|
          src = template_path('etc', *item)
          dest = File.join(STAGING_DIR, 'etc', *item)
          generate_from_template(dest, src, template_config)
        }
      end

      desc "Create sbin script files from template"
      task :sbin_scripts do
        ["td-agent", "td-agent-gem"].each { |command|
          src = template_path('usr', 'sbin', "#{command}.erb")
          dest = File.join(STAGING_DIR, 'usr', 'sbin', command)
          generate_from_template(dest, src, template_config, { mode: 0755 })
        }
      end

      desc "Create systemd unit file for Red Hat like systems"
      task :rpm_systemd do
        dest =  File.join(STAGING_DIR, 'usr', 'lib', 'systemd', 'system', PACKAGE_NAME + ".service")
        params = {pkg_type: "rpm"}
        generate_systemd_unit_file(dest, template_config(params))
      end

      desc "Create systemd unit file for Debian like systems"
      task :deb_systemd do
        dest = File.join(STAGING_DIR, 'etc', 'systemd', 'system', PACKAGE_NAME + ".service")
        params = {pkg_type: "deb"}
        generate_systemd_unit_file(dest, template_config(params))
      end

      desc "Create config files for WiX Toolset"
      task :wix_config do
        src  = File.join('msi', 'parameters.wxi.erb')
        dest = File.join('msi', 'parameters.wxi')
        generate_from_template(dest, src, template_config)
      end

      desc "Create configuration files for Red Hat like systems"
      task :rpm_config => [:td_agent_config, :sbin_scripts, :rpm_systemd]

      desc "Create configuration files for Debian like systems"
      task :deb_config => [:td_agent_config, :sbin_scripts, :deb_systemd, :deb_scripts]

      desc "Create configuration files for Windows"
      task :msi_config => [:td_agent_config, :sbin_scripts, :wix_config]
    end
  end

  private

  def windows?
    RUBY_PLATFORM =~ /mswin|mingw/
  end

  def template_config(params = nil)
    config = {
      project_name: PACKAGE_NAME,
      version: PACKAGE_VERSION,
      install_path: nil,
      install_message: nil,
      root_path: "/", # for systemd unit file
      pkg_type: nil,
    }

    if windows?
      # "default_root" is defined in omnibus, and it's used in
      # omnibus-td-agent/config/projects/td-agent3.rb.
      # To avoid confusion, we use same default_root value with omnibus.
      default_root = "C:"
      config[:install_path] = File.join("#{default_root}", "opt", "#{PACKAGE_NAME}")
    else
      default_root = "/opt"
      config[:install_path] = File.join("#{default_root}", "#{PACKAGE_NAME}")
    end

    if params
      config.merge(params)
    else
      config
    end
  end

  def template_path(*path_parts)
    File.join('templates', *path_parts)
  end

  def generate_from_template(dest, src, config, opts={})
    mode = opts.fetch(:mode, 0644)
    destination = dest.gsub('td-agent', config[:project_name])
    erb_binding = binding
    config.each do |key, value|
      erb_binding.local_variable_set(key, value)
    end
    directory = File.dirname(destination)
    mkdir_p(File.dirname(destination)) unless File.exists?(directory)
    puts "Generate #{destination}"
    File.open(destination, 'w', mode) do |f|
      f.write ERB.new(File.read(src), nil, '<>').result(erb_binding)
    end
  end

  def generate_systemd_unit_file(dest_path, config, opts={})
    template_file_path = template_path('etc', 'systemd', 'td-agent.service.erb')
    if File.exist?(template_file_path)
      generate_from_template(dest_path, template_file_path, config, { mode: 0755 })
    end
  end
end

class MSIPackageTask
  include Rake::DSL

  def define
    namespace :msi do
      desc "Build MSI package"
      task :build => [:"build:msi_config", :"build:gems"] do
        wix_dir = ENV["WIX"]
        fail "Can't find WiX commands path" if wix_dir.nil? || wix_dir.empty?

        wix_bin_dir = windows_path(wix_dir, "bin")
        heat_path = windows_path(wix_bin_dir, "heat")
        candle_path = windows_path(wix_bin_dir, "candle")
        light_path = windows_path(wix_bin_dir, "light")

        if RUBY_PLATFORM =~ /x64/
          arch = "x64"
        elsif RUBY_PLATFORM =~ /i386/
          arch = "x86"
        else
          fail "Unknown platform: #{RUBY_PLATFORM}"
        end

        cd("msi") do
          if Pathname(STAGING_DIR).relative?
            src_dir = File.join("..", STAGING_DIR)
          else
            src_dir = STAGING_DIR
          end

          # Pick up package contents
          sh(heat_path,
             "dir", src_dir,
             "-nologo", # Skip heat logo
             "-srd",    # Suppress harvesting the root directory as an element
             "-sreg",   # Suppress registry harvesting
             "-gg",                          # Generate guides
             "-cg", "ProjectDir",            # Component Group Name
             "-dr", "PROJECTLOCATION",       # Root directory reference
             "-var", "var.ProjectSourceDir", # Substitue File/@Source="SourceDir"
             "-t",   "exclude-files.xslt",   # XSLT for exclude files
             "-out", 'project-files.wxs')

          # Build
          sh(candle_path,
             "-nologo",                       # Skip candle logo
             "-dProjectSourceDir=#{src_dir}", # Define a parameter
             "project-files.wxs",
             "source.wxs")

          # Link
          sh(light_path,
             "-nologo",                        # Skip light logo
             "-ext", "WixUIExtension",         # Extension assembly
             "-cultures:en-us",                # Localization
             "-loc", "localization-en-us.wxl", # Localization file
             "project-files.wixobj",
             "source.wixobj",
             "-out", "td-agent-#{PACKAGE_VERSION}-#{arch}.msi")
        end
      end
    end
  end

  private

  def windows_path(*pieces)
    path = File.join(*pieces)
    if File::ALT_SEPARATOR
      path.gsub(File::SEPARATOR, File::ALT_SEPARATOR)
    else
      path
    end
  end
end

download_task = DownloadTask.new
download_task.define

build_task = BuildTask.new
build_task.define

msi_package_task = MSIPackageTask.new
msi_package_task.define

linux_package_task = TDAgentPackageTask.new(PACKAGE_NAME, PACKAGE_VERSION)
linux_package_task.define
